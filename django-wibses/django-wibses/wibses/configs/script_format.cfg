; property description - <name[:simple_type_name:default_value]:require_flag>
; if "simple_type_name" is used in property description, then "name" property will be used
;   in target script as a format constraint (property with name "name" will be required)
; "default_value" is used to generate template for new script
; require_flag values:
;       r - for required
;       nr - for not required, may be omitted
;
; "simple_type_name" possible values:
;       int - for integer
;       str - for string
;       num - for all numbers
;       bool - for boolean
;
; "enum" field of property give value constraints for specific property values.
;
; [x]
; type = str
; enum = a|b|c
;
; Configuration above means that property "x" of type "string" may only have values "a" "b" or "c"


; !!!! Each config file must contain [main] section as a configuration root property !!!!!

[main]
type = obj
name = script
all = script_params:r|circumstances:r|synthetic:r|analytical:r

; === configuration start ===

[script_params]
type = obj
name = params
all = script_name:r|id:str::nr

[script_name]
type = str
name = name
default = Template script
min = 1

; === synthetic section configuration ===

[synthetic]
type = obj
name = synthetic
all = synthetic_params:r|synthetic_sentences:r

[synthetic_params]
type = obj
name = params
all = threshold:int:50:r

[synthetic_sentences]
type = arr
name = sentences
items = sentence
min = 1
max = 1


; === analytical section configuration ===

[analytical]
type = obj
name  = analytical
all = analytical_params:r|analytical_sentences:r

[analytical_params]
type = obj
name = params
all = threshold:int:50:r

[analytical_sentences]
type = arr
name = sentences
items = sentence
min = 1

; === circumstances section configuration ===

[circumstances]
type = obj
name = circumstances
all = circumstances_params:r|circumstances_sentences:r


[circumstances_params]
type = obj
name = params
all = threshold:int:50:r

[circumstances_sentences]
type = arr
name = sentences
items = sentence
min = 1

; === sentence configuration ===

[sentence]
type = obj
name = sentence
all = sentence_params:r|slots:r

[sentence_params]
type = obj
name = params
all = obligatory:bool:false:r|threshold:int:10:r|name:str:Default sentence:r|weight:num:1:r

[slots]
type = arr
name = slots
items = slot
min = 1

; === slot configuration ===

[slot]
type = obj
name = slot
all = slot_params:r|tokens:r

[slot_params]
type = obj
name = params
all = obligatory:bool:false:r|min:int:1:r|name:str:Default slot:r|weight:num:1:r

[tokens]
type = arr
name = tokens
items = token
min = 1

; === token configuration ===

[token]
type = obj
name = token
all = id:str:-:r|label:str:default token:r|dic:str:-:r|token_type:r

[token_type]
type = str
name = type
enum = quotation|token
default = quotation